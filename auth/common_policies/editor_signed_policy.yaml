name: Policy Sample v1.6
desc: |
  Sample policy for editor signed tokens that checks authorized_meta,
  authorized_files, authorized_reps, and authorized_offerings values in the
  token/ctx. Using authorized_qids in the token/ctx is also supported implictly
  via the base auth layer object checks. It's not necessary to check the
  authorized_qids in the policy.

  Changelog:
  v1.6
    * add isReadInfo for reading content info with q/<qid>?details=true&profile=true
  v1.5
    * fix isContentDecrypt 
       * comparison of call/subject and call/node_id
       * allow read part
  v1.4
    * when token does not have authorized_xxxx accept rather than refusing any value:
      * accept offering if nil authorized_offerings
      * accept rep if nil authorized_reps
      * accept file if nil authorized_files
      * accept meta if nil authorized_meta
    * handle 'channel' in the same way as 'playout'
  v1.3
    * revert 1.1 (isContentDecrypt using call/subject)
  v1.2
    * add allowMediaDownload and permittedRep
  v1.1
    * fix isContentDecrypt to use call/subject
  v1.0
    * add version, description and change log

type: ast
expr:
  rule: main
rules:

  main:
    or:
      - rule: allowOffering
      - and:
          - rule: isReadFiles
          - rule: permittedFiles
      - and:
          - rule: isReadMeta
          - rule: permittedMeta
      - and:
          - rule: publicContent
          - and:
              - not:
                  - rule: isReadAudioVideo
              - not:
                  - rule: isReadFiles
              - not:
                  - rule: isReadMeta
      - rule: isContentDecrypt
      - rule: isReadInfo

  isReadFiles:
    eq:
      - env: api_call/action
      - q.read.files.read

  permittedFiles:
    or:
      - nil:
          env: token/ctx/authorized_files
      - in:
          - env: call/meta_path
          - env: token/ctx/authorized_files

  isReadMeta:
    eq:
      - env: api_call/action
      - q.read.meta

  permittedMeta:
    or:
      - nil:
          env: token/ctx/authorized_meta
      - in:
          - env: call/meta_path
          - env: token/ctx/authorized_meta

  isReadInfo:
    eq:
      - env: api_call/action
      - q.read.info

  # bc call path as path object to prevent path formatting issues
  bcCallPath:
    fn.data.ToPath:
      - env: call/bc_call/path

  isPlayout:
    in:
      - rule: bcCallPath/0
      - - playout
        - channel

  isReadAudioVideo:
    and:
      - eq:
          - env: api_call/action
          - q.read.bccall
      - rule: isPlayout

  isInternalCall:
    and:
      - not:
          env: call/is_entry_point
          def: true
      - in: # other "public" actions
          - env: api_call/action
          - - q.read.info
            - q.read.part.read
            - q.read.part.list
            - q.read.part.info
            - q.read.part.proofs
            - q.read.files.read
            - q.read.files.list
            - q.read.files.link
            - q.read.blob.link

  isContentDecrypt:
    and:
      - in:
          - env: api_call/action
          - - q.read.part.read
            - q.read.decrypt
      - fn.ids.Equivalent:
          - env: call/subject
          - env: call/node_id

  publicContent:
    and:
      - or:
          - rule: isBcRead
          - rule: isPublicMeta
      - not:
          or:
            - rule: isEncryptedData
            - rule: isCryptRead
            - in:
                - env: api_call/action
                - - q.read.versions
                  - q.read.decrypt

  isBcRead:
    and:
      - eq:
          - env: api_call/action
          - q.read.bccall
      - not:
          rule: isReadAudioVideo

  permittedRep:
    or:
      - nil:
          env: token/ctx/authorized_reps
      - in:
          # the rep name is the first segment in the bcCallPath:
          #   /rep/playout/offering/...
          #   /rep/media_download/offering/...
          # /rep is not part of bcCallPath (it's mapped to the "content" bitcode function)
          - rule: bcCallPath/0
          - env: token/ctx/authorized_reps

  permittedOfferings:
    and:
      - rule: permittedRep
      - or:
          - and:
              - rule: isPlayout
              - eq:
                  - rule: bcCallPath/1
                  - "options.json"
          - or:
              - nil:
                  env: token/ctx/authorized_offerings
              - in:
                  # the offering name is the second segment in the bcCallPath:
                  #   /rep/playout/offering/...
                  # /rep is not part of bcCallPath (it's mapped to the "content" bitcode function)
                  - rule: bcCallPath/1
                  - env: token/ctx/authorized_offerings

  isPublicMeta:
    and:
      - eq:
          - env: api_call/action
          - q.read.meta
      - or:
          - fn.strings.StartsWith:
              - env: call/meta_path
              - /public
          - not:
              env: call/is_entry_point

  isEncryptedData:
    and:
      - in:
          - env: api_call/action
          - - q.read.part.read
            - q.read.files.read
      - env: call/is_encrypted_data

  isCryptRead:
    and:
      - in:
          - env: api_call/action
          - q.read.crypt
      - env: call/is_entry_point
      - eq:
          - env: call/grant
          - read-crypt

  # ----------------------------------------------------------------------------
  # Bitcode rules
  # ----------------------------------------------------------------------------

  allowOffering:
    or:
      - and:
          - rule: isReadAudioVideo
          - rule: permittedOfferings
      - rule: isInternalCall

  allowMediaDownload:
    rule: permittedRep
